#!/usr/bin/env python3

import asyncio
import multiprocessing
import os

from autobahn.asyncio import wamp

from apollo.command_processor_component import get_command_processor_component
from apollo.command_receiver_component import get_command_receiver


command_queue = multiprocessing.Manager().Queue(500)

URL_TEMPLATE = "ws://{host}:{port}/{path}"

url = URL_TEMPLATE.format(
    host='localhost',
    port='8000',
    path='ws'
)

def start_command_processor(command_queue, url, loop=None):
    # New event loops are required for event loops to run in a subprocess
    loop = loop or asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    component = get_command_processor_component(command_queue)
    runner = wamp.ApplicationRunner(url, realm='ot_realm')
    runner.run(component)


def start_command_receiver(command_queue, url):
    # New event loops are required for event loops to run in a subprocess
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    component = get_command_receiver(command_queue)
    runner = wamp.ApplicationRunner(url, realm='ot_realm')
    runner.run(component)


processor_process = multiprocessing.Process(
    target=start_command_processor, args=(command_queue, url)
)
receiver_process = multiprocessing.Process(
    target=start_command_receiver, args=(command_queue, url)
)


processor_process.start()
receiver_process.start()

processor_process.join()
receiver_process.join()
